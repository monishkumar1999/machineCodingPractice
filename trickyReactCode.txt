import { useEffect, useRef } from "react";
import "./styles.css";

export default function App() {
  const ref1 = useRef(null);
  const ref2 = useRef(null);
  useEffect(() => {
    ref1.current.focus();
    ref2.current.focus();
  }, []);
  return (
    <div className="App">
      <input ref={ref1} />

      <input ref={ref2} />
    </div>
  );
}
   

useMemo
import React, { useEffect, useMemo, useState } from "react";

export default function App() {
  const [render, setRender] = useState(0);

  const a = {};
  // âœ… obref only changes if `a` changes (which it won't)
  const obref = useMemo(() => ({ a: 1 }), []);

  useEffect(() => {
    console.log("Changed obref!");
  }, [obref]);
  // same referance in obref so useEffect only once call

  useEffect(() => {
    console.log("Changed a!");
  }, [a]);

  // every rerender new object will create so the useEffect will call


//   If a is a primitive (like number, string, boolean), React checks by value

// If a is an object ({}), array ([]), or function (() => {}), React checks by reference (memory)



  return (
    <>
      <h2>Render Count: {render}</h2>
      <button onClick={() => setRender((prev) => prev + 1)}>Increase</button>
    </>
  );
}
